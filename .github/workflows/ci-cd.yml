name: CI/CD Pipeline

# 트리거 조건
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

# 환경변수 설정
env:
  DOCKER_IMAGE: weather-automation
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

jobs:
  # 1단계: 테스트 실행
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Chrome for testing
      run: |
       # Google Chrome 설치
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
       # Chrome 버전 확인
        CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        echo "Chrome 버전: $CHROME_VERSION"
    
        # 새로운 Chrome for Testing API 사용
        CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
        echo "ChromeDriver 버전: $CHROMEDRIVER_VERSION"
    
        # ChromeDriver 다운로드 및 설치
        wget -O /tmp/chromedriver-linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
        sudo unzip /tmp/chromedriver-linux64.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
    
        # 설치 확인
        chromedriver --version

    - name: Run unit tests
      run: |
        # 환경변수 설정 (테스트용 더미 값)
        export EMAIL_USER="test@example.com"
        export EMAIL_PASS="test_password"
        export EMAIL_RECEIVER="test@example.com"
        
        # 통합 테스트 실행 (실제 스크래핑 제외)
        pytest tests/ -v --tb=short

    - name: Test Docker build
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:test .

  # 2단계: 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install code quality tools
      run: |
        pip install flake8 black isort

    - name: Check code formatting with Black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # E501: 라인 길이 무시 (Selenium 코드는 길어질 수 있음)
        # W503: 이진 연산자 앞의 라인 브레이크 허용
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E501,W503

  # 3단계: Docker 이미지 빌드 및 배포
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy Docker Image
    needs: [test, code-quality]  # 테스트와 코드 품질 검사 성공 후 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


  # 4단계: 알림 (선택사항)
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [build-and-deploy]
    if: always()  # 성공/실패 여부와 관계없이 실행

    steps:
    - name: Send success notification
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "CI/CD 파이프라인이 성공적으로 완료되었습니다!"
        echo "Docker 이미지가 Docker Hub에 배포되었습니다."

    - name: Send failure notification
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "CI/CD 파이프라인이 실패했습니다."
        echo "로그를 확인하여 문제를 해결해주세요."